#include "LazerTower.h"

LazerTower::LazerTower()
{

}

LazerTower::LazerTower(float32 positionX, float32 positionY)
{
	//tower range
	range = 20.0f;

	damage = 5.0f;

	//gun vertices
	b2Vec2 lazerTowerVertices[6];
	lazerTowerVertices[0].Set(0.4f, 1.8f);
	lazerTowerVertices[1].Set(0.4f, -1.8f);
	lazerTowerVertices[2].Set(-0.4f, -1.8f);
	lazerTowerVertices[3].Set(-0.4f, 1.8);
	lazerTowerVertices[4].Set(-0.1f, 2.0f);
	lazerTowerVertices[5].Set(0.1f, 2.0f);

	lazerTowerBodyDef.type = b2_kinematicBody;
	lazerTowerBodyDef.position.Set(positionX, positionY);
	lazerTowerBodyDef.angle = 0;

	//lt_polygon.SetAsBox(0.4f, 1.8f);
	lt_polygon.Set(lazerTowerVertices, 6);

	lazerTowerFixtureDef.shape = &lt_polygon;
	lazerTowerFixtureDef.density = 1;	

	enemyTarget = new EnemyL();
	enemyTarget->enemyBody = NULL;
	fireRate = 1.0f;
	reload = 0;
	distanceToNearestEnemy = range * 2;
}

LazerTower::~LazerTower()
{
	
}

void LazerTower::buildLazerTower(b2World* m_world)
{
	//create base
	b2BodyDef towerBodyDef;
	towerBodyDef.type = b2_staticBody;
	towerBodyDef.position.Set(0, 20.0f);
	towerBodyDef.angle = 0;

	b2Body* towerBody = m_world->CreateBody(&towerBodyDef);

	b2PolygonShape polygon;
	polygon.SetAsBox(1.0f, 1.0f);

	b2FixtureDef boxFixtureDef;
	boxFixtureDef.shape = &polygon;
	boxFixtureDef.density = 1;
	towerBody->CreateFixture(&boxFixtureDef);

	lazerTowerBody = m_world->CreateBody(&lazerTowerBodyDef);
	lazerTowerBody->CreateFixture(&lazerTowerFixtureDef);
}

void LazerTower::update(b2World* m_world, std::vector<EnemyL *> enemies)
{
	DetectEnemy lazerTowerDetectEnemy;
	lazerTowerDetectEnemy.m_circle.m_radius = range;
	lazerTowerDetectEnemy.m_circle.m_p = lazerTowerBody->GetPosition();
	lazerTowerDetectEnemy.m_transform.SetIdentity();

	b2AABB aabb;
	lazerTowerDetectEnemy.m_circle.ComputeAABB(&aabb, lazerTowerDetectEnemy.m_transform, 0);

	m_world->QueryAABB(&lazerTowerDetectEnemy, aabb);

	if (hasOneEnemyInRange() == false)
		detectEnemy(lazerTowerDetectEnemy.target, enemies);

	if (enemyTarget != NULL)
		focusEnemy();
	//reload when tower has shot
	if (reload >= 0)
		reload -= 0.1f;
}

void LazerTower::detectEnemy(b2Body* target, std::vector<EnemyL *> enemies)
{
	b2Vec2 distance;
	if (target != NULL)
	{
		distance = target->GetPosition() - lazerTowerBody->GetPosition();
		if (distance.Length() < distanceToNearestEnemy)
		{
			for (int i = 0; i < enemies.size(); i++)
			{
				if (enemies[i]->isAlive() && target == enemies[i]->enemyBody)
				{
					//printf("Detect enemy %d\n", i);
					enemyTarget = enemies[i];
				}
			}
			if (enemyTarget == NULL)
				return;
			enemyTarget->enemyBody = target;
			distanceToNearestEnemy = distance.Length();
		}
	}
}

void LazerTower::focusEnemy()
{
	//if (enemyTarget->enemyBody == NULL)
	//if (enemyTarget == NULL)
		//return;
	float32 bodyAngle = getLazerTowerAngle();
	b2Vec2 toTarget = enemyTarget->enemyBody->GetPosition() - getLazerTowerPosition();
	float32 rotationToTarget = atan2f(-toTarget.x, toTarget.y);
	float32 totalRotation = rotationToTarget - bodyAngle;
	////animation rotation
	float32 change = 20.0f * b2_pi / 180.0f;

	////avoid rotate more than 180 degrees
	while (totalRotation < -b2_pi) totalRotation += 2.0f * b2_pi;
	while (totalRotation > b2_pi) totalRotation -= 2.0f * b2_pi;

	float32 newAngle = bodyAngle + fmin(change, fmax(-change, totalRotation));
	lazerTowerBody->SetTransform(getLazerTowerPosition(), newAngle);	

	if (reload <= 0)
	{
		Shoot();
		reload = 1.0f / fireRate;
	}	
}

void LazerTower::Shoot()
{
	//printf("Shoot Enemy - damage: %f\n", damage);
	enemyTarget->takeDamage(damage);	
}

float32 LazerTower::getLazerTowerAngle()
{
	return lazerTowerBody->GetAngle();
}

b2Vec2 LazerTower::getLazerTowerPosition()
{
	return lazerTowerBody->GetPosition();
}

float32 LazerTower::getRange()
{
	return range;
}

bool LazerTower::hasOneEnemyInRange()
{
	if (enemyTarget == NULL || enemyTarget->enemyBody == NULL)
		return false;
	b2Vec2 distance;
	distance = enemyTarget->enemyBody->GetPosition() - lazerTowerBody->GetPosition();
	if (distance.Length() > range)
	{
		//enemyTarget->enemyBody = NULL;
		enemyTarget = NULL;
		//printf("release enemy target\n");
		distanceToNearestEnemy = range * 2;
		return false;
	}
	return true;
}