#pragma once
#include <stdio.h>
#include "../Utilities/utilities.h"
#include "Vertex.h"
#include "Model.h"
#include "Texture.h"
#include "CubeTexture.h"
#include "Shaders.h"
#include "Shaders_cube.h"
#include "Lights.h"
#include "Camera.h"
#include "ResourceManager.h"
#include "Object.h"
#include <iostream>
#include "Sprite.h"

class SceneManager
{
protected:
	SceneManager();
	~SceneManager();
	/*implicit methods exist for the copy constructor and operator= and we want to forbid calling them.*/
	SceneManager(const SceneManager &) {}
	SceneManager& operator =(const SceneManager &) {}
public:
	static void CreateInstance()
	{
		if (ms_pInstance == NULL)
			ms_pInstance = new SceneManager;
	}
	static SceneManager * GetInstance()
	{
		return ms_pInstance;
	}
	static void DestroyInstance()
	{
		if (ms_pInstance)
		{
			delete ms_pInstance->myCamera;
			ms_pInstance->myCamera = NULL;
			delete ms_pInstance;
			ms_pInstance = NULL;

		}
	}
	void SceneLoading();
	void Init();
	float latestTime = 0;
	int GetObjwID(int ID);
	void Update(float deltaTime);
	void Draws();
	void CleanUp();
	int ObjectCount;
	int LightsCount;
	int NrLights;
	int CamerasCount;
	std::vector <Object*> Objects;
	std::vector <Lights*> Light;
	Camera* myCamera = new Camera;
protected:
	static SceneManager * ms_pInstance;
};
