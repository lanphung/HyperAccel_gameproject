/*
* Copyright (c) 2006-2009 Erin Catto http://www.box2d.org
*
* This software is provided 'as-is', without any express or implied
* warranty.  In no event will the authors be held liable for any damages
* arising from the use of this software.
* Permission is granted to anyone to use this software for any purpose,
* including commercial applications, and to alter it and redistribute it
* freely, subject to the following restrictions:
* 1. The origin of this software must not be misrepresented; you must not
* claim that you wrote the original software. If you use this software
* in a product, an acknowledgment in the product documentation would be
* appreciated but is not required.
* 2. Altered source versions must be plainly marked as such, and must not be
* misrepresented as being the original software.
* 3. This notice may not be removed or altered from any source distribution.
*/

#ifndef VERTICAL_STACK_H
#define VERTICAL_STACK_H

extern bool g_blockSolve;

class VerticalStack : public Test
{
public:

	enum
	{
		e_columnCount = 1,
		e_rowCount = 15
		//e_columnCount = 1,
		//e_rowCount = 1
	};

	VerticalStack()
	{
		{

		}

		float32 xs[5] = {0.0f, -10.0f, -5.0f, 5.0f, 10.0f};

		b2PolygonShape shape;
		shape.SetAsBox(0.5f, 0.5f);

		b2FixtureDef fd;
		fd.shape = &shape;
		fd.density = 1.0f;
		fd.friction = 0.3f;
		b2BodyDef bd;
		bd.type = b2_dynamicBody;
		bd.position.Set(0, 10);
		b2Body* body = m_world->CreateBody(&bd);
		m_ship = body;
		body->CreateFixture(&fd);
		m_ship->SetGravityScale(0);
		


		for (int32 j = 0; j < e_columnCount; ++j)
		{
			b2PolygonShape shape;
			shape.SetAsBox(0.5f, 0.5f);

			b2FixtureDef fd;
			fd.shape = &shape;
			fd.density = 1.0f;
			fd.friction = 0.3f;
			float32 x = 0.0f;
			for (int i = 0; i < e_rowCount; ++i)
			{
				b2BodyDef bd;
				bd.type = b2_dynamicBody;

				int32 n = j * e_rowCount + i;
				b2Assert(n < e_rowCount * e_columnCount);
				m_indices[n] = n;
				bd.userData = m_indices + n;

				bd.position.Set(x, 30);
				b2Body* body = m_world->CreateBody(&bd);

				m_bodies[n] = body;
				m_bodies[i]->SetGravityScale(0);
				body->CreateFixture(&fd);
				x += 1.5;
			}
			
		}

		m_bullet = NULL;
	}

	void KeyboardUp(int key) {
		switch (key)
		{
		case GLFW_KEY_D:
			m_ship->SetLinearVelocity(b2Vec2(0.0f, 0.0f));
			break;

		case GLFW_KEY_A:
			m_ship->SetLinearVelocity(b2Vec2(0.0f, 0.0f));
			break;


		}
		
	}

	void Keyboard(int key)
	{
		switch (key)
		{
		
		case GLFW_KEY_D:
			m_ship->SetLinearVelocity(b2Vec2(5.0f, 0.0f));
			break;

		case GLFW_KEY_A:
			m_ship->SetLinearVelocity(b2Vec2(-5.0f, 0.0f));
			break;
		
		case GLFW_KEY_COMMA:
			if (m_bullet != NULL)
			{
				m_world->DestroyBody(m_bullet);
				m_bullet = NULL;
			}

			{
				b2CircleShape shape;
				shape.m_radius = 0.25f;

				b2FixtureDef fd;
				fd.shape = &shape;
				fd.density = 1.0f;
				fd.restitution = 0.05f;

				b2BodyDef bd;
				bd.type = b2_dynamicBody;
				bd.bullet = true;
				bd.position.Set(m_ship->GetPosition().x, m_ship->GetPosition().y+1);
				b2Body *body = m_world->CreateBody(&bd);
				m_bullet = m_world->CreateBody(&bd);
				m_bullet->CreateFixture(&fd);
				body->CreateFixture(&fd);
				m_bullet->SetLinearVelocity(b2Vec2(0.0f, 100.0f));
				body->SetLinearVelocity(b2Vec2(0.0f, 100.0f));
				
			}
			break;
                
        case GLFW_KEY_B:
            g_blockSolve = !g_blockSolve;
            break;
		}
	}

	void Step(Settings* settings)
	{
		Test::Step(settings);
		g_debugDraw.DrawString(5, m_textLine, "Press: (,) to launch a bullet.");
		m_textLine += DRAW_STRING_NEW_LINE;
		g_debugDraw.DrawString(5, m_textLine, "Blocksolve = %d", g_blockSolve);

		const int32 k_maxNuke = 3;
		b2Body* nuke[k_maxNuke];
		int32 nukeCount = 0;

		// Traverse the contact results. Destroy bodies that
		// are touching heavier bodies.
		for (int32 i = 0; i < m_pointCount; ++i)
		{
			ContactPoint* point = m_points + i;

			b2Body* body1 = point->fixtureA->GetBody();
			b2Body* body2 = point->fixtureB->GetBody();
		}
		// Sort the nuke array to group duplicates.
	/*	std::sort(nuke, nuke + nukeCount);
		
		// Destroy the bodies, skipping duplicates.
		int32 i = 0;
		while (i < nukeCount)
		{
			b2Body* b = nuke[i++];
			while (i < nukeCount && nuke[i] == b)
			{
				++i;
			}

			if (b != m_bomb)
			{
				m_world->DestroyBody(b);
			}
		}*/
	}

	static Test* Create()
	{
		return new VerticalStack;
	}

	b2Body* m_bullet;
	b2Body* m_bodies[e_rowCount * e_columnCount];
	b2Body* m_ship;
	int32 m_indices[e_rowCount * e_columnCount];
};

#endif
